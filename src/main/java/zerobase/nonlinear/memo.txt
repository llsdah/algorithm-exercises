비선형

1. 트리
- 노드와 링크로 구성 : 연결리스트
- 계층적으로 구조 : 폴더 구조, 조직도 등
- 하나의 노드에서 다른노드 이동 경로는 유일
- 노드가 N개인 트리의 Edge 수는 N-1
- Acyclic 사이클 존재안함
- 모든 노드는 연결
- 하나 연결끊으면 2개 트리

1.1 이진트리
- 각 노드는 최대 2개 자식
- 자식노드는 좌우
1.1.1 포화 이진트리
- 모든레벨에서 노드 꽉 차있음
- 높이가 h 일때 노드 수는 2의(h+1) -1 개
- 노드가 N개일때 높이는 logN
- 이진트리가 노드 N개일때 최대 가능높이는 N
1.1.2 완전 이진
- 마자막 레벨을 제외하고 노드들이 모두 채워진
1.1.3 정이진트리
- 모든 노드가 0개 또는2개의 자식 노드를 가짐
1.1.4 편향 트리 = 사향 트리
- 한쪽으로 기울어짐
1.1.5 균형 트리
- 모든 노드의 좌우 서브 트리 높이가 1이상 차이 나지 않는 트리

1.2 이진트리 순회
- 모든 노드를 빠지지 않고 중복하지 않고 방문하는 연상
- DFS : 전위 , 중위, 후위
- BFS : 레벨

1.2.1 전위
- 현재 > 왼쪽 > 오른쪽 우선순위
1.2.2 중위
- 왼쪽 > 현재 > 오른쪽
1.2.3 후위
- 왼쪽 > 오른쪽 > 현재
1.2.4 레벨순위
- 라인별 순회 -> 리스트 구현
- 부모노드 = /2
- 왼쪽노드 = *2 + 0
- 오른쪽노드 = *2 + +



2. 이진 탐색 트리 bst
- 중복키 허용 하지 않음
- 왼쪽 자식 노드의 키가 부모 노드의 키보다 작음
- 오른쪽 자식 노드의 키는 부모 노드 키보다 큼
- 각 서브 트리도 이진 탐색트리를 유지
=> 정렬된 데이터 : 이진 트리에 비해 탐색이 빠름,!

2.1 탐색법
- 참고자 하는 데이터를 루토 노드 부터 비교시작
- 대소 비교 하는 데이터가 작으면 왼쪽, 크면 오른쪽 노드
- 찾는 데이터가 없다면 null, 찹아도 최대트리높이 만큼 탐색 수행

2.2 삽입
- 루트 부터 시작, 중복시 종료
- 삽입 데이터가 현재보다 작으면=왼족, 크면=오른쪽
- Leaf 도달시 키비교해 작으면=왼족, 크면=오른쪽

2.3 삭제
- Leaf 노드 이면, 대상 삭제 후 자식링크 null변경
- 자식노드가 한개 있다면, 남은 자식노드를 부모노드에 연결
- 자식노드가 둘 이면
    - 삭제대상 노드의 왼쪽서브트리에서 가장 큰 노드 or 오른쪽 서브트리에서 가장작은 노드 선택
    - 해당 노드 위치로 올림 -> 자식노드 재연결 -> 대상 삭제


3 균형이진트리
- 모든 노드의 좌우 서브트리 높이가 1이상 차이 나지 않는 트리
- 노드의 삽입과 삭제 수행시 균형을 유지하도록 하는 트리 ( AVL, Red-Black)

3.1 AVL
- 노드가 십입 삭제 될떄 트리의 균형을 체크하고 유지하는 트리
- 각 노드의 BF -1.0,1 만 가지게 하려 균형을 유지
- BF(balance Factor) = 왼쪽 서브트리 높이 - 오른쪽 서브트리 높이
- 리밸런싱 : BF '+' 왼쪽 서브 트리에 이상 , BF '-' 오른쪽 서브트리에 이상
- 회전 연상 : 단순 회선 - LL(1회 회전 오른쪽방향회전), RR(1회회전 왼쪽방향회전)  이중회선 - LR(RR->LL),RL(LL->RR)










